* Overview of Javascript
js is a widely used, high level programming language
It is primarily used for creating interactive and dynamic web pages.
It is also used for building mobile apps.
It is also used for creating interactive documents.
It is also used for building server side applications.

History of JS 
Js created in 1995 by Brendan Eich at Netscape.
Originally called Mocha, then Livescript and finally Javascript.
leveraged popularity of java at the time. Js & Java both are completely different languages from each other.
JS first introduced in browser - Netscape Navigator 2.0

What is ECMAScript?
ECMA - set standards for different version of js.
ECMAScript (often referred to as simply "js") is a programming language specification standardized by the European Computer Manufacturers Association (ECMA).
First published in 1997. - ECMAScript1
ECMAScript defines the syntax, semantics, and features of the language, and specifies how it should be implemented.
Major updates introduced in 2015 (ES6)
latest version ECMAScript 2022 (ES13)

What is Node JS?
Node.js is an open-source, cross-platform js runtime environment that enables developers to run js code on the server side.

Chrome - v8 js engine, Microsoft edge - Chakra, Mozilla Firefox - Gecko js engine.

variables - var
// = assignmental operator
// naming convension of variables
// 1. Resemblance
// 2. variable name always starts with small or capital letter or _(underscore)
// 3. snake_case_pattern, camelCasePattern, PascalCasePattern

// Datatypes - Numbers, String, Boolean, null, Undefined, Object(Object & Arrays)

Here null - first it has some value but after sometimes that particular value is removed from the variable. 
Typeof null is called object

whereas undefined is a variable in which any value is never assigned to that particular variable.

//Case Sensitive a != A or 97 != 65
//ASCII Code / Bytecode - (a-97) (A-65) ----- ASCII code means that every alphabet assigned some values to it in numbers because computers understands in binary code.
//hello != Hello

// Assignment Operators
// % - Modulo Division & ** - Power

ctrl + Shift + J - directly open console in a browser
ctrl + click - Open a file in a new tab in the replit or VS Code

*Var - Introduced in ES5. 
*Let & Const - Introduced in ES6. 

Var function scoped hota hai or apne parent fnc mein kahi v use ho sakta hai.
let braces scoped hota hai
Var adds itself to the window object whereas let & const doesn't add itself to the window object.

*Execution context mtlb jab v hum func chalayenge tab fnc apna ek khudka ek imaginary container bana lega jis mein uski 3 cheeze hogi:
1. variables
2. fnc inside that parent fnc
3. lexical environment of that fnc - isse parent fnc child fnc ko use kar sakta hai lekin child fnc k element ko use nahi kar sakta hai.
ye jo imaginary container hai isse he hum execution context kehte hai.

Basically Execution context is a container where the function's code is executed and it's created whenever the function is called, it contains 3 things - variables, functions & lexical environment. 

Lexical Environment ek chart hota hota hai jisme ye likha hota hai ki aapka particular fnc kin cheezo ko access kar sakta hai or kinko nahi, that means it holds it's scope and scope chain.

*falsy values iss prakaar hai - 0, false, undefined, null, NaN, document.all

*ForEach loop kabhi bhi by default aapke array mein change nahi karta hai wo aapko changes kar k deta hai array ki temporary copy par jiske wajah se array hamesha same rehta hai. 

*First class function jiska matlab hota hai ki aap fnc ko use kar sakte ho as a value. Basically aise fncs jo normal value or variable ki tarah treat kare jaa sakte hai.

*High Order Functions aisa fnc jo accept kar le ek aur fnc as a argument ya fir wo return kar de ek aur fnc.

*Immdiately Invoked Function Expression (IIFE) - ye fnc ko turant chalane ka tarika hai, iski madad se private variables bhi bana sakte hai.
